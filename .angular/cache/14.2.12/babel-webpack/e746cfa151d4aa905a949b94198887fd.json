{"ast":null,"code":"/**\n * @module ol/net\n */\nimport { getUid } from './util.js';\n/**\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\n * The error callback will be called when no JSONP is executed after 10 seconds.\n *\n * @param {string} url Request url. A 'callback' query parameter will be\n *     appended.\n * @param {Function} callback Callback on success.\n * @param {Function} [errback] Callback on error.\n * @param {string} [callbackParam] Custom query parameter for the JSONP\n *     callback. Default is 'callback'.\n */\n\nexport function jsonp(url, callback, errback, callbackParam) {\n  const script = document.createElement('script');\n  const key = 'olc_' + getUid(callback);\n\n  function cleanup() {\n    delete window[key];\n    script.parentNode.removeChild(script);\n  }\n\n  script.async = true;\n  script.src = url + (url.includes('?') ? '&' : '?') + (callbackParam || 'callback') + '=' + key;\n  const timer = setTimeout(function () {\n    cleanup();\n\n    if (errback) {\n      errback();\n    }\n  }, 10000);\n\n  window[key] = function (data) {\n    clearTimeout(timer);\n    cleanup();\n    callback(data);\n  };\n\n  document.head.appendChild(script);\n}\nexport class ResponseError extends Error {\n  /**\n   * @param {XMLHttpRequest} response The XHR object.\n   */\n  constructor(response) {\n    const message = 'Unexpected response status: ' + response.status;\n    super(message);\n    /**\n     * @type {string}\n     */\n\n    this.name = 'ResponseError';\n    /**\n     * @type {XMLHttpRequest}\n     */\n\n    this.response = response;\n  }\n\n}\nexport class ClientError extends Error {\n  /**\n   * @param {XMLHttpRequest} client The XHR object.\n   */\n  constructor(client) {\n    super('Failed to issue request');\n    /**\n     * @type {string}\n     */\n\n    this.name = 'ClientError';\n    /**\n     * @type {XMLHttpRequest}\n     */\n\n    this.client = client;\n  }\n\n}\n/**\n * @param {string} url The URL.\n * @return {Promise<Object>} A promise that resolves to the JSON response.\n */\n\nexport function getJSON(url) {\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\n     */\n    function onLoad(event) {\n      const client = event.target; // status will be 0 for file:// urls\n\n      if (!client.status || client.status >= 200 && client.status < 300) {\n        let data;\n\n        try {\n          data = JSON.parse(client.responseText);\n        } catch (err) {\n          const message = 'Error parsing response text as JSON: ' + err.message;\n          reject(new Error(message));\n          return;\n        }\n\n        resolve(data);\n        return;\n      }\n\n      reject(new ResponseError(client));\n    }\n    /**\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\n     */\n\n\n    function onError(event) {\n      reject(new ClientError(event.target));\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener('load', onLoad);\n    client.addEventListener('error', onError);\n    client.open('GET', url);\n    client.setRequestHeader('Accept', 'application/json');\n    client.send();\n  });\n}\n/**\n * @param {string} base The base URL.\n * @param {string} url The potentially relative URL.\n * @return {string} The full URL.\n */\n\nexport function resolveUrl(base, url) {\n  if (url.includes('://')) {\n    return url;\n  }\n\n  return new URL(url, base).href;\n}\nlet originalXHR;\nexport function overrideXHR(xhr) {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    originalXHR = XMLHttpRequest;\n  }\n\n  global.XMLHttpRequest = xhr;\n}\nexport function restoreXHR() {\n  global.XMLHttpRequest = originalXHR;\n}","map":null,"metadata":{},"sourceType":"module"}