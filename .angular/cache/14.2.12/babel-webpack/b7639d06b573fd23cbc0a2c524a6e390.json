{"ast":null,"code":"/**\n * @module ol/VectorRenderTile\n */\nimport Tile from './Tile.js';\nimport { createCanvasContext2D, releaseCanvas } from './dom.js';\nimport { getUid } from './util.js';\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\n\nconst canvasPool = [];\n\nclass VectorRenderTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n   * to get source tiles for this tile.\n   */\n  constructor(tileCoord, state, urlTileCoord, getSourceTiles) {\n    super(tileCoord, state, {\n      transition: 0\n    });\n    /**\n     * @private\n     * @type {!Object<string, CanvasRenderingContext2D>}\n     */\n\n    this.context_ = {};\n    /**\n     * Executor groups by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n\n    this.executorGroups = {};\n    /**\n     * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n\n    this.declutterExecutorGroups = {};\n    /**\n     * Number of loading source tiles. Read/written by the source.\n     * @type {number}\n     */\n\n    this.loadingSourceTiles = 0;\n    /**\n     * @type {Object<number, ImageData>}\n     */\n\n    this.hitDetectionImageData = {};\n    /**\n     * @private\n     * @type {!Object<string, ReplayState>}\n     */\n\n    this.replayState_ = {};\n    /**\n     * @type {Array<import(\"./VectorTile.js\").default>}\n     */\n\n    this.sourceTiles = [];\n    /**\n     * @type {Object<string, boolean>}\n     */\n\n    this.errorTileKeys = {};\n    /**\n     * @type {number}\n     */\n\n    this.wantedResolution;\n    /**\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\n     */\n\n    this.getSourceTiles = getSourceTiles.bind(undefined, this);\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n\n    this.wrappedTileCoord = urlTileCoord;\n  }\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {CanvasRenderingContext2D} The rendering context.\n   */\n\n\n  getContext(layer) {\n    const key = getUid(layer);\n\n    if (!(key in this.context_)) {\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n    }\n\n    return this.context_[key];\n  }\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {boolean} Tile has a rendering context for the given layer.\n   */\n\n\n  hasContext(layer) {\n    return getUid(layer) in this.context_;\n  }\n  /**\n   * Get the Canvas for this tile.\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n\n\n  getImage(layer) {\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n  }\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {ReplayState} The replay state.\n   */\n\n\n  getReplayState(layer) {\n    const key = getUid(layer);\n\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedTileZ: -1\n      };\n    }\n\n    return this.replayState_[key];\n  }\n  /**\n   * Load the tile.\n   */\n\n\n  load() {\n    this.getSourceTiles();\n  }\n  /**\n   * Remove from the cache due to expiry\n   */\n\n\n  release() {\n    for (const key in this.context_) {\n      const context = this.context_[key];\n      releaseCanvas(context);\n      canvasPool.push(context.canvas);\n      delete this.context_[key];\n    }\n\n    super.release();\n  }\n\n}\n\nexport default VectorRenderTile;","map":null,"metadata":{},"sourceType":"module"}