{"ast":null,"code":"/* eslint-disable no-restricted-globals, no-restricted-syntax */\n\n/* global SharedArrayBuffer */\nimport { CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT } from \"./messages.mjs\";\n/** @type {<T extends (...args: any) => any>(target: T) => (thisArg: ThisType<T>, ...args: any[]) => any} */\n\nfunction uncurryThis(target) {\n  return (thisArg, ...args) => {\n    return ReflectApply(target, thisArg, args);\n  };\n}\n/** @type {(target: any, key: string | symbol) => (thisArg: any, ...args: any[]) => any} */\n\n\nfunction uncurryThisGetter(target, key) {\n  return uncurryThis(ReflectGetOwnPropertyDescriptor(target, key).get);\n} // Reflect\n\n\nexport const {\n  apply: ReflectApply,\n  construct: ReflectConstruct,\n  defineProperty: ReflectDefineProperty,\n  get: ReflectGet,\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor,\n  getPrototypeOf: ReflectGetPrototypeOf,\n  has: ReflectHas,\n  ownKeys: ReflectOwnKeys,\n  set: ReflectSet,\n  setPrototypeOf: ReflectSetPrototypeOf\n} = Reflect; // Proxy\n\nexport const NativeProxy = Proxy; // Number\n\nexport const {\n  MAX_SAFE_INTEGER,\n  isFinite: NumberIsFinite,\n  isNaN: NumberIsNaN\n} = Number; // Symbol\n\nexport const {\n  iterator: SymbolIterator,\n  species: SymbolSpecies,\n  toStringTag: SymbolToStringTag,\n  for: SymbolFor\n} = Symbol; // Object\n\nexport const NativeObject = Object;\nexport const {\n  create: ObjectCreate,\n  defineProperty: ObjectDefineProperty,\n  freeze: ObjectFreeze,\n  is: ObjectIs\n} = NativeObject;\nconst ObjectPrototype = NativeObject.prototype;\n/** @type {(object: object, key: PropertyKey) => Function | undefined} */\n\nexport const ObjectPrototype__lookupGetter__ =\n/** @type {any} */\nObjectPrototype.__lookupGetter__ ? uncurryThis(\n/** @type {any} */\nObjectPrototype.__lookupGetter__) : (object, key) => {\n  if (object == null) {\n    throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n  }\n\n  let target = NativeObject(object);\n\n  do {\n    const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n\n    if (descriptor !== undefined) {\n      if (ObjectHasOwn(descriptor, \"get\")) {\n        return descriptor.get;\n      }\n\n      return;\n    }\n  } while ((target = ReflectGetPrototypeOf(target)) !== null);\n};\n/** @type {(object: object, key: PropertyKey) => boolean} */\n\nexport const ObjectHasOwn =\n/** @type {any} */\nNativeObject.hasOwn || uncurryThis(ObjectPrototype.hasOwnProperty); // Array\n\nconst NativeArray = Array;\nexport const ArrayIsArray = NativeArray.isArray;\nconst ArrayPrototype = NativeArray.prototype;\n/** @type {(array: ArrayLike<unknown>, separator?: string) => string} */\n\nexport const ArrayPrototypeJoin = uncurryThis(ArrayPrototype.join);\n/** @type {<T>(array: T[], ...items: T[]) => number} */\n\nexport const ArrayPrototypePush = uncurryThis(ArrayPrototype.push);\n/** @type {(array: ArrayLike<unknown>, ...opts: any[]) => string} */\n\nexport const ArrayPrototypeToLocaleString = uncurryThis(ArrayPrototype.toLocaleString);\nexport const NativeArrayPrototypeSymbolIterator = ArrayPrototype[SymbolIterator];\n/** @type {<T>(array: T[]) => IterableIterator<T>} */\n\nexport const ArrayPrototypeSymbolIterator = uncurryThis(NativeArrayPrototypeSymbolIterator); // Math\n\nexport const MathTrunc = Math.trunc; // ArrayBuffer\n\nexport const NativeArrayBuffer = ArrayBuffer;\nexport const ArrayBufferIsView = NativeArrayBuffer.isView;\nconst ArrayBufferPrototype = NativeArrayBuffer.prototype;\n/** @type {(buffer: ArrayBuffer, begin?: number, end?: number) => number} */\n\nexport const ArrayBufferPrototypeSlice = uncurryThis(ArrayBufferPrototype.slice);\n/** @type {(buffer: ArrayBuffer) => ArrayBuffer} */\n\nexport const ArrayBufferPrototypeGetByteLength = uncurryThisGetter(ArrayBufferPrototype, \"byteLength\"); // SharedArrayBuffer\n\nexport const NativeSharedArrayBuffer = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : null;\n/** @type {(buffer: SharedArrayBuffer) => SharedArrayBuffer} */\n\nexport const SharedArrayBufferPrototypeGetByteLength = NativeSharedArrayBuffer && uncurryThisGetter(NativeSharedArrayBuffer.prototype, \"byteLength\"); // TypedArray\n\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n\n/** @type {any} */\n\nexport const TypedArray = ReflectGetPrototypeOf(Uint8Array);\nconst TypedArrayFrom = TypedArray.from;\nexport const TypedArrayPrototype = TypedArray.prototype;\nexport const NativeTypedArrayPrototypeSymbolIterator = TypedArrayPrototype[SymbolIterator];\n/** @type {(typedArray: TypedArray) => IterableIterator<number>} */\n\nexport const TypedArrayPrototypeKeys = uncurryThis(TypedArrayPrototype.keys);\n/** @type {(typedArray: TypedArray) => IterableIterator<number>} */\n\nexport const TypedArrayPrototypeValues = uncurryThis(TypedArrayPrototype.values);\n/** @type {(typedArray: TypedArray) => IterableIterator<[number, number]>} */\n\nexport const TypedArrayPrototypeEntries = uncurryThis(TypedArrayPrototype.entries);\n/** @type {(typedArray: TypedArray, array: ArrayLike<number>, offset?: number) => void} */\n\nexport const TypedArrayPrototypeSet = uncurryThis(TypedArrayPrototype.set);\n/** @type {<T extends TypedArray>(typedArray: T) => T} */\n\nexport const TypedArrayPrototypeReverse = uncurryThis(TypedArrayPrototype.reverse);\n/** @type {<T extends TypedArray>(typedArray: T, value: number, start?: number, end?: number) => T} */\n\nexport const TypedArrayPrototypeFill = uncurryThis(TypedArrayPrototype.fill);\n/** @type {<T extends TypedArray>(typedArray: T, target: number, start: number, end?: number) => T} */\n\nexport const TypedArrayPrototypeCopyWithin = uncurryThis(TypedArrayPrototype.copyWithin);\n/** @type {<T extends TypedArray>(typedArray: T, compareFn?: (a: number, b: number) => number) => T} */\n\nexport const TypedArrayPrototypeSort = uncurryThis(TypedArrayPrototype.sort);\n/** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */\n\nexport const TypedArrayPrototypeSlice = uncurryThis(TypedArrayPrototype.slice);\n/** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */\n\nexport const TypedArrayPrototypeSubarray = uncurryThis(TypedArrayPrototype.subarray);\n/** @type {((typedArray: TypedArray) => ArrayBuffer)} */\n\nexport const TypedArrayPrototypeGetBuffer = uncurryThisGetter(TypedArrayPrototype, \"buffer\");\n/** @type {((typedArray: TypedArray) => number)} */\n\nexport const TypedArrayPrototypeGetByteOffset = uncurryThisGetter(TypedArrayPrototype, \"byteOffset\");\n/** @type {((typedArray: TypedArray) => number)} */\n\nexport const TypedArrayPrototypeGetLength = uncurryThisGetter(TypedArrayPrototype, \"length\");\n/** @type {(target: unknown) => string} */\n\nexport const TypedArrayPrototypeGetSymbolToStringTag = uncurryThisGetter(TypedArrayPrototype, SymbolToStringTag); // Uint16Array\n\nexport const NativeUint16Array = Uint16Array;\n/** @type {Uint16ArrayConstructor[\"from\"]} */\n\nexport const Uint16ArrayFrom = (...args) => {\n  return ReflectApply(TypedArrayFrom, NativeUint16Array, args);\n}; // Uint32Array\n\nexport const NativeUint32Array = Uint32Array; // Float32Array\n\nexport const NativeFloat32Array = Float32Array; // ArrayIterator\n\n/** @type {any} */\n\nexport const ArrayIteratorPrototype = ReflectGetPrototypeOf([][SymbolIterator]());\n/** @type {<T>(arrayIterator: IterableIterator<T>) => IteratorResult<T>} */\n\nexport const ArrayIteratorPrototypeNext = uncurryThis(ArrayIteratorPrototype.next); // Generator\n\n/** @type {<T = unknown, TReturn = any, TNext = unknown>(generator: Generator<T, TReturn, TNext>, value?: TNext) => T} */\n\nexport const GeneratorPrototypeNext = uncurryThis(function* () {}().next); // Iterator\n\nexport const IteratorPrototype = ReflectGetPrototypeOf(ArrayIteratorPrototype); // DataView\n\nconst DataViewPrototype = DataView.prototype;\n/** @type {(dataView: DataView, byteOffset: number, littleEndian?: boolean) => number} */\n\nexport const DataViewPrototypeGetUint16 = uncurryThis(DataViewPrototype.getUint16);\n/** @type {(dataView: DataView, byteOffset: number, value: number, littleEndian?: boolean) => void} */\n\nexport const DataViewPrototypeSetUint16 = uncurryThis(DataViewPrototype.setUint16); // Error\n\nexport const NativeTypeError = TypeError;\nexport const NativeRangeError = RangeError; // WeakSet\n\n/**\n * Do not construct with arguments to avoid calling the \"add\" method\n *\n * @type {{new <T extends {}>(): WeakSet<T>}}\n */\n\nexport const NativeWeakSet = WeakSet;\nconst WeakSetPrototype = NativeWeakSet.prototype;\n/** @type {<T extends {}>(set: WeakSet<T>, value: T) => Set<T>} */\n\nexport const WeakSetPrototypeAdd = uncurryThis(WeakSetPrototype.add);\n/** @type {<T extends {}>(set: WeakSet<T>, value: T) => boolean} */\n\nexport const WeakSetPrototypeHas = uncurryThis(WeakSetPrototype.has); // WeakMap\n\n/**\n * Do not construct with arguments to avoid calling the \"set\" method\n *\n * @type {{new <K extends {}, V>(): WeakMap<K, V>}}\n */\n\nexport const NativeWeakMap = WeakMap;\nconst WeakMapPrototype = NativeWeakMap.prototype;\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => V} */\n\nexport const WeakMapPrototypeGet = uncurryThis(WeakMapPrototype.get);\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => boolean} */\n\nexport const WeakMapPrototypeHas = uncurryThis(WeakMapPrototype.has);\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K, value: V) => WeakMap} */\n\nexport const WeakMapPrototypeSet = uncurryThis(WeakMapPrototype.set);","map":null,"metadata":{},"sourceType":"module"}