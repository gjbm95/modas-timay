{"ast":null,"code":"/**\n * @module ol/DataTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport { createCanvasContext2D } from './dom.js';\n/**\n * @typedef {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} ImageLike\n */\n\n/**\n * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} ArrayLike\n */\n\n/**\n * Data that can be used with a DataTile.\n * @typedef {ArrayLike|ImageLike} Data\n */\n\n/**\n * @param {Data} data Tile data.\n * @return {ImageLike|null} The image-like data.\n */\n\nexport function asImageLike(data) {\n  return data instanceof Image || data instanceof HTMLCanvasElement || data instanceof HTMLVideoElement ? data : null;\n}\n/**\n * @param {Data} data Tile data.\n * @return {ArrayLike|null} The array-like data.\n */\n\nexport function asArrayLike(data) {\n  return data instanceof Uint8Array || data instanceof Uint8ClampedArray || data instanceof Float32Array || data instanceof DataView ? data : null;\n}\n/**\n * @type {CanvasRenderingContext2D|null}\n */\n\nlet sharedContext = null;\n/**\n * @param {ImageLike} image The image.\n * @return {Uint8ClampedArray} The data.\n */\n\nexport function toArray(image) {\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(image.width, image.height, undefined, {\n      willReadFrequently: true\n    });\n  }\n\n  const canvas = sharedContext.canvas;\n  const width = image.width;\n\n  if (canvas.width !== width) {\n    canvas.width = width;\n  }\n\n  const height = image.height;\n\n  if (canvas.height !== height) {\n    canvas.height = height;\n  }\n\n  sharedContext.clearRect(0, 0, width, height);\n  sharedContext.drawImage(image, 0, 0);\n  return sharedContext.getImageData(0, 0, width, height).data;\n}\n/**\n * @type {import('./size.js').Size}\n */\n\nconst defaultSize = [256, 256];\n/**\n * @typedef {Object} Options\n * @property {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,\n * the promise should not resolve until the image is loaded.\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {import('./size.js').Size} [size=[256, 256]] Tile size.\n * @api\n */\n\nclass DataTile extends Tile {\n  /**\n   * @param {Options} options Tile options.\n   */\n  constructor(options) {\n    const state = TileState.IDLE;\n    super(options.tileCoord, state, {\n      transition: options.transition,\n      interpolate: options.interpolate\n    });\n    /**\n     * @type {function(): Promise<Data>}\n     * @private\n     */\n\n    this.loader_ = options.loader;\n    /**\n     * @type {Data}\n     * @private\n     */\n\n    this.data_ = null;\n    /**\n     * @type {Error}\n     * @private\n     */\n\n    this.error_ = null;\n    /**\n     * @type {import('./size.js').Size|null}\n     * @private\n     */\n\n    this.size_ = options.size || null;\n  }\n  /**\n   * Get the tile size.\n   * @return {import('./size.js').Size} Tile size.\n   */\n\n\n  getSize() {\n    if (this.size_) {\n      return this.size_;\n    }\n\n    const imageData = asImageLike(this.data_);\n\n    if (imageData) {\n      return [imageData.width, imageData.height];\n    }\n\n    return defaultSize;\n  }\n  /**\n   * Get the data for the tile.\n   * @return {Data} Tile data.\n   * @api\n   */\n\n\n  getData() {\n    return this.data_;\n  }\n  /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   * @api\n   */\n\n\n  getError() {\n    return this.error_;\n  }\n  /**\n   * Load not yet loaded URI.\n   * @api\n   */\n\n\n  load() {\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\n      return;\n    }\n\n    this.state = TileState.LOADING;\n    this.changed();\n    const self = this;\n    this.loader_().then(function (data) {\n      self.data_ = data;\n      self.state = TileState.LOADED;\n      self.changed();\n    }).catch(function (error) {\n      self.error_ = error;\n      self.state = TileState.ERROR;\n      self.changed();\n    });\n  }\n\n}\n\nexport default DataTile;","map":null,"metadata":{},"sourceType":"module"}