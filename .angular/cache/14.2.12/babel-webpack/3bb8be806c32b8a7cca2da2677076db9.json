{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Usuario/Documents/Trabajos para empresas/Modas Timay Fashion/Pagina web/modas-timay/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport function assign(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\nexport function chunk(iterable, length) {\n  const results = [];\n  const lengthOfIterable = iterable.length;\n\n  for (let i = 0; i < lengthOfIterable; i += length) {\n    const chunked = [];\n\n    for (let ci = i; ci < i + length; ci++) {\n      chunked.push(iterable[ci]);\n    }\n\n    results.push(chunked);\n  }\n\n  return results;\n}\nexport function endsWith(string, expectedEnding) {\n  if (string.length < expectedEnding.length) {\n    return false;\n  }\n\n  const actualEnding = string.substr(string.length - expectedEnding.length);\n  return actualEnding === expectedEnding;\n}\nexport function forEach(iterable, func) {\n  const {\n    length\n  } = iterable;\n\n  for (let i = 0; i < length; i++) {\n    func(iterable[i], i);\n  }\n}\nexport function invert(oldObj) {\n  const newObj = {};\n\n  for (const key in oldObj) {\n    if (oldObj.hasOwnProperty(key)) {\n      const value = oldObj[key];\n      newObj[value] = key;\n    }\n  }\n\n  return newObj;\n}\nexport function range(n) {\n  const results = [];\n\n  for (let i = 0; i < n; i++) {\n    results.push(i);\n  }\n\n  return results;\n}\nexport function times(numTimes, func) {\n  const results = [];\n\n  for (let i = 0; i < numTimes; i++) {\n    results.push(func(i));\n  }\n\n  return results;\n}\nexport function toArray(iterable) {\n  const results = [];\n  const {\n    length\n  } = iterable;\n\n  for (let i = 0; i < length; i++) {\n    results.push(iterable[i]);\n  }\n\n  return results;\n}\nexport function toArrayRecursively(input) {\n  if (input.length) {\n    return toArray(input).map(toArrayRecursively);\n  }\n\n  return input;\n} // copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\n\nexport function parseContentRange(headerValue) {\n  if (!headerValue) {\n    return null;\n  }\n\n  if (typeof headerValue !== 'string') {\n    throw new Error('invalid argument');\n  }\n\n  const parseInt = number => Number.parseInt(number, 10); // Check for presence of unit\n\n\n  let matches = headerValue.match(/^(\\w*) /);\n  const unit = matches && matches[1]; // check for start-end/size header format\n\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\n\n  if (matches) {\n    return {\n      unit,\n      first: parseInt(matches[1]),\n      last: parseInt(matches[2]),\n      length: matches[3] === '*' ? null : parseInt(matches[3])\n    };\n  } // check for size header format\n\n\n  matches = headerValue.match(/(\\d+|\\*)/);\n\n  if (matches) {\n    return {\n      unit,\n      first: null,\n      last: null,\n      length: matches[1] === '*' ? null : parseInt(matches[1])\n    };\n  }\n\n  return null;\n}\n/*\n * Promisified wrapper around 'setTimeout' to allow 'await'\n */\n\nexport function wait(_x) {\n  return _wait.apply(this, arguments);\n}\n\nfunction _wait() {\n  _wait = _asyncToGenerator(function* (milliseconds) {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n  });\n  return _wait.apply(this, arguments);\n}\n\nexport function zip(a, b) {\n  const A = Array.isArray(a) ? a : Array.from(a);\n  const B = Array.isArray(b) ? b : Array.from(b);\n  return A.map((k, i) => [k, B[i]]);\n} // Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\nexport class AbortError extends Error {\n  constructor(params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(params); // Maintains proper stack trace for where our error was thrown (only available on V8)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AbortError);\n    }\n\n    this.name = 'AbortError';\n  }\n\n}\nexport class CustomAggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.message = message;\n    this.name = 'AggregateError';\n  }\n\n}\nexport const AggregateError = CustomAggregateError;","map":null,"metadata":{},"sourceType":"module"}