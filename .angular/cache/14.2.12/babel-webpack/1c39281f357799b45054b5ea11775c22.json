{"ast":null,"code":"/**\n * @module ol/VectorTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\n\nclass VectorTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {string} src Data source url.\n   * @param {import(\"./format/Feature.js\").default} format Feature format.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\n   */\n  constructor(tileCoord, state, src, format, tileLoadFunction, options) {\n    super(tileCoord, state, options);\n    /**\n     * Extent of this tile; set by the source.\n     * @type {import(\"./extent.js\").Extent}\n     */\n\n    this.extent = null;\n    /**\n     * @private\n     * @type {import(\"./format/Feature.js\").default}\n     */\n\n    this.format_ = format;\n    /**\n     * @private\n     * @type {Array<import(\"./Feature.js\").default>}\n     */\n\n    this.features_ = null;\n    /**\n     * @private\n     * @type {import(\"./featureloader.js\").FeatureLoader}\n     */\n\n    this.loader_;\n    /**\n     * Feature projection of this tile; set by the source.\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n\n    this.projection = null;\n    /**\n     * Resolution of this tile; set by the source.\n     * @type {number}\n     */\n\n    this.resolution;\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n\n    this.tileLoadFunction_ = tileLoadFunction;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.url_ = src;\n    this.key = src;\n  }\n  /**\n   * Get the feature format assigned for reading this tile's features.\n   * @return {import(\"./format/Feature.js\").default} Feature format.\n   * @api\n   */\n\n\n  getFormat() {\n    return this.format_;\n  }\n  /**\n   * Get the features for this tile. Geometries will be in the view projection.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n\n\n  getFeatures() {\n    return this.features_;\n  }\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.setState(TileState.LOADING);\n      this.tileLoadFunction_(this, this.url_);\n\n      if (this.loader_) {\n        this.loader_(this.extent, this.resolution, this.projection);\n      }\n    }\n  }\n  /**\n   * Handler for successful tile load.\n   * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data projection.\n   */\n\n\n  onLoad(features, dataProjection) {\n    this.setFeatures(features);\n  }\n  /**\n   * Handler for tile load errors.\n   */\n\n\n  onError() {\n    this.setState(TileState.ERROR);\n  }\n  /**\n   * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\n   * Sets the features for the tile.\n   * @param {Array<import(\"./Feature.js\").default>} features Features.\n   * @api\n   */\n\n\n  setFeatures(features) {\n    this.features_ = features;\n    this.setState(TileState.LOADED);\n  }\n  /**\n   * Set the feature loader for reading this tile's features.\n   * @param {import(\"./featureloader.js\").FeatureLoader} loader Feature loader.\n   * @api\n   */\n\n\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n}\n\nexport default VectorTile;","map":null,"metadata":{},"sourceType":"module"}