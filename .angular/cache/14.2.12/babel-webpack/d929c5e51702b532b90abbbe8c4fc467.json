{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Usuario/Documents/Trabajos para empresas/Modas Timay Fashion/Pagina web/modas-timay/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport http from 'http';\nimport https from 'https';\nimport urlMod from 'url';\nimport { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass HttpResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for node HTTP/HTTPS API Response\n   * @param {http.ServerResponse} response\n   */\n  constructor(response, dataPromise) {\n    super();\n    this.response = response;\n    this.dataPromise = dataPromise;\n  }\n\n  get status() {\n    return this.response.statusCode;\n  }\n\n  getHeader(name) {\n    return this.response.headers[name];\n  }\n\n  getData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const data = yield _this.dataPromise;\n      return data;\n    })();\n  }\n\n}\n\nexport class HttpClient extends BaseClient {\n  constructor(url) {\n    super(url);\n    this.parsedUrl = urlMod.parse(this.url);\n    this.httpApi = this.parsedUrl.protocol === 'http:' ? http : https;\n  }\n\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const request = this.httpApi.get({ ...this.parsedUrl,\n        headers\n      }, response => {\n        const dataPromise = new Promise(resolveData => {\n          const chunks = []; // collect chunks\n\n          response.on('data', chunk => {\n            chunks.push(chunk);\n          }); // concatenate all chunks and resolve the promise with the resulting buffer\n\n          response.on('end', () => {\n            const data = Buffer.concat(chunks).buffer;\n            resolveData(data);\n          });\n          response.on('error', reject);\n        });\n        resolve(new HttpResponse(response, dataPromise));\n      });\n      request.on('error', reject);\n\n      if (signal) {\n        if (signal.aborted) {\n          request.destroy(new AbortError('Request aborted'));\n        }\n\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\n      }\n    });\n  }\n\n  request({\n    headers,\n    signal\n  } = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this2.constructRequest(headers, signal);\n      return response;\n    })();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}