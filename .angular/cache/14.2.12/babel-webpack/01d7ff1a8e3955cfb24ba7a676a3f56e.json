{"ast":null,"code":"/**\n * @module ol/functions\n */\nimport { equals as arrayEquals } from './array.js';\n/**\n * Always returns true.\n * @return {boolean} true.\n */\n\nexport function TRUE() {\n  return true;\n}\n/**\n * Always returns false.\n * @return {boolean} false.\n */\n\nexport function FALSE() {\n  return false;\n}\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\n\nexport function VOID() {}\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\n\nexport function memoizeOne(fn) {\n  let called = false;\n  /** @type {ReturnType} */\n\n  let lastResult;\n  /** @type {Array<any>} */\n\n  let lastArgs;\n  let lastThis;\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n\n    return lastResult;\n  };\n}\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\n\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    if (value instanceof Promise) {\n      return value;\n    }\n\n    return Promise.resolve(value);\n  }\n\n  return promiseGetter();\n}","map":null,"metadata":{},"sourceType":"module"}