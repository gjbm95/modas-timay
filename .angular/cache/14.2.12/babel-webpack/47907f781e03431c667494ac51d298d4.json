{"ast":null,"code":"/**\n * @module ol/source/Cluster\n */\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport Point from '../geom/Point.js';\nimport VectorSource from './Vector.js';\nimport { add as addCoordinate, scale as scaleCoordinate } from '../coordinate.js';\nimport { assert } from '../asserts.js';\nimport { buffer, createEmpty, createOrUpdateFromCoordinate, getCenter } from '../extent.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [distance=20] Distance in pixels within which features will\n * be clustered together.\n * @property {number} [minDistance=0] Minimum distance in pixels between clusters.\n * Will be capped at the configured distance.\n * By default no minimum distance is guaranteed. This config can be used to avoid\n * overlapping icons. As a tradoff, the cluster feature's position will no longer be\n * the center of all its features.\n * @property {function(Feature):Point} [geometryFunction]\n * Function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a\n * feature should not be considered for clustering, the function should return\n * `null`. The default, which works when the underlying source contains point\n * features only, is\n * ```js\n * function(feature) {\n *   return feature.getGeometry();\n * }\n * ```\n * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster\n * calculation point for polygons.\n * @property {function(Point, Array<Feature>):Feature} [createCluster]\n * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array\n * of {@link module:ol/Feature~Feature} included in this cluster. Must return a\n * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:\n * ```js\n * function(point, features) {\n *   return new Feature({\n *     geometry: point,\n *     features: features\n *   });\n * }\n * ```\n * @property {VectorSource} [source=null] Source.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n/**\n * @classdesc\n * Layer source to cluster vector data. Works out of the box with point\n * geometries. For other geometry types, or if not all geometries should be\n * considered for clustering, a custom `geometryFunction` can be defined.\n *\n * If the instance is disposed without also disposing the underlying\n * source `setSource(null)` has to be called to remove the listener reference\n * from the wrapped source.\n * @api\n */\n\nclass Cluster extends VectorSource {\n  /**\n   * @param {Options} options Cluster options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      wrapX: options.wrapX\n    });\n    /**\n     * @type {number|undefined}\n     * @protected\n     */\n\n    this.resolution = undefined;\n    /**\n     * @type {number}\n     * @protected\n     */\n\n    this.distance = options.distance !== undefined ? options.distance : 20;\n    /**\n     * @type {number}\n     * @protected\n     */\n\n    this.minDistance = options.minDistance || 0;\n    /**\n     * @type {number}\n     * @protected\n     */\n\n    this.interpolationRatio = 0;\n    /**\n     * @type {Array<Feature>}\n     * @protected\n     */\n\n    this.features = [];\n    /**\n     * @param {Feature} feature Feature.\n     * @return {Point} Cluster calculation point.\n     * @protected\n     */\n\n    this.geometryFunction = options.geometryFunction || function (feature) {\n      const geometry =\n      /** @type {Point} */\n      feature.getGeometry();\n      assert(geometry.getType() == 'Point', 10); // The default `geometryFunction` can only handle `Point` geometries\n\n      return geometry;\n    };\n    /**\n     * @type {function(Point, Array<Feature>):Feature}\n     * @private\n     */\n\n\n    this.createCustomCluster_ = options.createCluster;\n    /**\n     * @type {VectorSource|null}\n     * @protected\n     */\n\n    this.source = null;\n    /**\n     * @private\n     */\n\n    this.boundRefresh_ = this.refresh.bind(this);\n    this.updateDistance(this.distance, this.minDistance);\n    this.setSource(options.source || null);\n  }\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.\n   * @api\n   */\n\n\n  clear(fast) {\n    this.features.length = 0;\n    super.clear(fast);\n  }\n  /**\n   * Get the distance in pixels between clusters.\n   * @return {number} Distance.\n   * @api\n   */\n\n\n  getDistance() {\n    return this.distance;\n  }\n  /**\n   * Get a reference to the wrapped source.\n   * @return {VectorSource|null} Source.\n   * @api\n   */\n\n\n  getSource() {\n    return this.source;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  loadFeatures(extent, resolution, projection) {\n    this.source.loadFeatures(extent, resolution, projection);\n\n    if (resolution !== this.resolution) {\n      this.resolution = resolution;\n      this.refresh();\n    }\n  }\n  /**\n   * Set the distance within which features will be clusterd together.\n   * @param {number} distance The distance in pixels.\n   * @api\n   */\n\n\n  setDistance(distance) {\n    this.updateDistance(distance, this.minDistance);\n  }\n  /**\n   * Set the minimum distance between clusters. Will be capped at the\n   * configured distance.\n   * @param {number} minDistance The minimum distance in pixels.\n   * @api\n   */\n\n\n  setMinDistance(minDistance) {\n    this.updateDistance(this.distance, minDistance);\n  }\n  /**\n   * The configured minimum distance between clusters.\n   * @return {number} The minimum distance in pixels.\n   * @api\n   */\n\n\n  getMinDistance() {\n    return this.minDistance;\n  }\n  /**\n   * Replace the wrapped source.\n   * @param {VectorSource|null} source The new source for this instance.\n   * @api\n   */\n\n\n  setSource(source) {\n    if (this.source) {\n      this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n\n    this.source = source;\n\n    if (source) {\n      source.addEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n\n    this.refresh();\n  }\n  /**\n   * Handle the source changing.\n   */\n\n\n  refresh() {\n    this.clear();\n    this.cluster();\n    this.addFeatures(this.features);\n  }\n  /**\n   * Update the distances and refresh the source if necessary.\n   * @param {number} distance The new distance.\n   * @param {number} minDistance The new minimum distance.\n   */\n\n\n  updateDistance(distance, minDistance) {\n    const ratio = distance === 0 ? 0 : Math.min(minDistance, distance) / distance;\n    const changed = distance !== this.distance || this.interpolationRatio !== ratio;\n    this.distance = distance;\n    this.minDistance = minDistance;\n    this.interpolationRatio = ratio;\n\n    if (changed) {\n      this.refresh();\n    }\n  }\n  /**\n   * @protected\n   */\n\n\n  cluster() {\n    if (this.resolution === undefined || !this.source) {\n      return;\n    }\n\n    const extent = createEmpty();\n    const mapDistance = this.distance * this.resolution;\n    const features = this.source.getFeatures();\n    /** @type {Object<string, true>} */\n\n    const clustered = {};\n\n    for (let i = 0, ii = features.length; i < ii; i++) {\n      const feature = features[i];\n\n      if (!(getUid(feature) in clustered)) {\n        const geometry = this.geometryFunction(feature);\n\n        if (geometry) {\n          const coordinates = geometry.getCoordinates();\n          createOrUpdateFromCoordinate(coordinates, extent);\n          buffer(extent, mapDistance, extent);\n          const neighbors = this.source.getFeaturesInExtent(extent).filter(function (neighbor) {\n            const uid = getUid(neighbor);\n\n            if (uid in clustered) {\n              return false;\n            }\n\n            clustered[uid] = true;\n            return true;\n          });\n          this.features.push(this.createCluster(neighbors, extent));\n        }\n      }\n    }\n  }\n  /**\n   * @param {Array<Feature>} features Features\n   * @param {import(\"../extent.js\").Extent} extent The searched extent for these features.\n   * @return {Feature} The cluster feature.\n   * @protected\n   */\n\n\n  createCluster(features, extent) {\n    const centroid = [0, 0];\n\n    for (let i = features.length - 1; i >= 0; --i) {\n      const geometry = this.geometryFunction(features[i]);\n\n      if (geometry) {\n        addCoordinate(centroid, geometry.getCoordinates());\n      } else {\n        features.splice(i, 1);\n      }\n    }\n\n    scaleCoordinate(centroid, 1 / features.length);\n    const searchCenter = getCenter(extent);\n    const ratio = this.interpolationRatio;\n    const geometry = new Point([centroid[0] * (1 - ratio) + searchCenter[0] * ratio, centroid[1] * (1 - ratio) + searchCenter[1] * ratio]);\n\n    if (this.createCustomCluster_) {\n      return this.createCustomCluster_(geometry, features);\n    }\n\n    return new Feature({\n      geometry,\n      features\n    });\n  }\n\n}\n\nexport default Cluster;","map":null,"metadata":{},"sourceType":"module"}