{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Usuario/Documents/Trabajos para empresas/Modas Timay Fashion/Pagina web/modas-timay/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  getData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.data;\n    })();\n  }\n\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      } // hook signals\n\n\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n\n      xhr.onerror = reject;\n\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  request({\n    headers,\n    signal\n  } = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this2.constructRequest(headers, signal);\n      return response;\n    })();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}