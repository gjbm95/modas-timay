{"ast":null,"code":"import { ArrayBufferPrototypeGetByteLength, ArrayIsArray, ArrayIteratorPrototype, ArrayIteratorPrototypeNext, MathTrunc, NativeArrayPrototypeSymbolIterator, NativeSharedArrayBuffer, NativeTypedArrayPrototypeSymbolIterator, NumberIsFinite, SharedArrayBufferPrototypeGetByteLength, SymbolIterator, TypedArrayPrototypeGetSymbolToStringTag } from \"./primordials.mjs\";\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\n\nexport function isObject(value) {\n  return value !== null && typeof value === \"object\" || typeof value === \"function\";\n}\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\n\nexport function isObjectLike(value) {\n  return value !== null && typeof value === \"object\";\n} // Inspired by util.types implementation of Node.js\n\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\n\nexport function isNativeTypedArray(value) {\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\n}\n/**\n * @param {unknown} value\n * @returns {value is BigInt64Array|BigUint64Array}\n */\n\nexport function isNativeBigIntTypedArray(value) {\n  const typedArrayName = TypedArrayPrototypeGetSymbolToStringTag(value);\n  return typedArrayName === \"BigInt64Array\" || typedArrayName === \"BigUint64Array\";\n}\n/**\n * @param {unknown} value\n * @returns {value is ArrayBuffer}\n */\n\nexport function isArrayBuffer(value) {\n  try {\n    ArrayBufferPrototypeGetByteLength(\n    /** @type {any} */\n    value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @param {unknown} value\n * @returns {value is SharedArrayBuffer}\n */\n\nexport function isSharedArrayBuffer(value) {\n  if (NativeSharedArrayBuffer === null) {\n    return false;\n  }\n\n  try {\n    SharedArrayBufferPrototypeGetByteLength(\n    /** @type {any} */\n    value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @param {unknown} value\n * @returns {value is unknown[]}\n */\n\nexport function isOrdinaryArray(value) {\n  if (!ArrayIsArray(value)) {\n    return false;\n  } // Verify that there are no changes in ArrayIterator\n\n\n  return value[SymbolIterator] === NativeArrayPrototypeSymbolIterator && ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext;\n}\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\n\nexport function isOrdinaryNativeTypedArray(value) {\n  if (!isNativeTypedArray(value)) {\n    return false;\n  } // Verify that there are no changes in ArrayIterator\n\n\n  return value[SymbolIterator] === NativeTypedArrayPrototypeSymbolIterator && ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext;\n}\n/**\n * @param {unknown} value\n * @returns {value is string}\n */\n\nexport function isCanonicalIntegerIndexString(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  const number = +value;\n\n  if (value !== number + \"\") {\n    return false;\n  }\n\n  if (!NumberIsFinite(number)) {\n    return false;\n  }\n\n  return number === MathTrunc(number);\n}","map":null,"metadata":{},"sourceType":"module"}