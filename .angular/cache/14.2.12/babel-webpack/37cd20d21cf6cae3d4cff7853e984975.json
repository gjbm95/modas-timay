{"ast":null,"code":"const CRLFCRLF = '\\r\\n\\r\\n';\n/*\n * Shim for 'Object.fromEntries'\n */\n\nfunction itemsToObject(items) {\n  if (typeof Object.fromEntries !== 'undefined') {\n    return Object.fromEntries(items);\n  }\n\n  const obj = {};\n\n  for (const [key, value] of items) {\n    obj[key.toLowerCase()] = value;\n  }\n\n  return obj;\n}\n/**\n * Parse HTTP headers from a given string.\n * @param {String} text the text to parse the headers from\n * @returns {Object} the parsed headers with lowercase keys\n */\n\n\nfunction parseHeaders(text) {\n  const items = text.split('\\r\\n').map(line => {\n    const kv = line.split(':').map(str => str.trim());\n    kv[0] = kv[0].toLowerCase();\n    return kv;\n  });\n  return itemsToObject(items);\n}\n/**\n * Parse a 'Content-Type' header value to the content-type and parameters\n * @param {String} rawContentType the raw string to parse from\n * @returns {Object} the parsed content type with the fields: type and params\n */\n\n\nexport function parseContentType(rawContentType) {\n  const [type, ...rawParams] = rawContentType.split(';').map(s => s.trim());\n  const paramsItems = rawParams.map(param => param.split('='));\n  return {\n    type,\n    params: itemsToObject(paramsItems)\n  };\n}\n/**\n * Parse a 'Content-Range' header value to its start, end, and total parts\n * @param {String} rawContentRange the raw string to parse from\n * @returns {Object} the parsed parts\n */\n\nexport function parseContentRange(rawContentRange) {\n  let start;\n  let end;\n  let total;\n\n  if (rawContentRange) {\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\n    start = parseInt(start, 10);\n    end = parseInt(end, 10);\n    total = parseInt(total, 10);\n  }\n\n  return {\n    start,\n    end,\n    total\n  };\n}\n/**\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\n * Each item in the list has the following properties:\n * - headers: the HTTP headers\n * - data: the sliced ArrayBuffer for that specific part\n * - offset: the offset of the byterange within its originating file\n * - length: the length of the byterange\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\n * @param {String} boundary the boundary string used to split the sections\n * @returns {Object[]} the parsed byteranges\n */\n\nexport function parseByteRanges(responseArrayBuffer, boundary) {\n  let offset = null;\n  const decoder = new TextDecoder('ascii');\n  const out = [];\n  const startBoundary = `--${boundary}`;\n  const endBoundary = `${startBoundary}--`; // search for the initial boundary, may be offset by some bytes\n  // TODO: more efficient to check for `--` in bytes directly\n\n  for (let i = 0; i < 10; ++i) {\n    const text = decoder.decode(new Uint8Array(responseArrayBuffer, i, startBoundary.length));\n\n    if (text === startBoundary) {\n      offset = i;\n    }\n  }\n\n  if (offset === null) {\n    throw new Error('Could not find initial boundary');\n  }\n\n  while (offset < responseArrayBuffer.byteLength) {\n    const text = decoder.decode(new Uint8Array(responseArrayBuffer, offset, Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset))); // break if we arrived at the end\n\n    if (text.length === 0 || text.startsWith(endBoundary)) {\n      break;\n    } // assert that we are actually dealing with a byterange and are at the correct offset\n\n\n    if (!text.startsWith(startBoundary)) {\n      throw new Error('Part does not start with boundary');\n    } // get a substring from where we read the headers\n\n\n    const innerText = text.substr(startBoundary.length + 2);\n\n    if (innerText.length === 0) {\n      break;\n    } // find the double linebreak that denotes the end of the headers\n\n\n    const endOfHeaders = innerText.indexOf(CRLFCRLF); // parse the headers to get the content range size\n\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\n    const {\n      start,\n      end,\n      total\n    } = parseContentRange(headers['content-range']); // calculate the length of the slice and the next offset\n\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\n    out.push({\n      headers,\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\n      offset: start,\n      length,\n      fileSize: total\n    });\n    offset = startOfData + length + 4;\n  }\n\n  return out;\n}","map":null,"metadata":{},"sourceType":"module"}