{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Usuario/Documents/Trabajos para empresas/Modas Timay Fashion/Pagina web/modas-timay/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport fs from 'fs';\nimport { BaseSource } from './basesource.js';\n\nfunction closeAsync(fd) {\n  return new Promise((resolve, reject) => {\n    fs.close(fd, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nfunction openAsync(path, flags, mode = undefined) {\n  return new Promise((resolve, reject) => {\n    fs.open(path, flags, mode, (err, fd) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(fd);\n      }\n    });\n  });\n}\n\nfunction readAsync(...args) {\n  return new Promise((resolve, reject) => {\n    fs.read(...args, (err, bytesRead, buffer) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({\n          bytesRead,\n          buffer\n        });\n      }\n    });\n  });\n}\n\nclass FileSource extends BaseSource {\n  constructor(path) {\n    super();\n    this.path = path;\n    this.openRequest = openAsync(path, 'r');\n  }\n\n  fetchSlice(slice) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO: use `signal`\n      const fd = yield _this.openRequest;\n      const {\n        buffer\n      } = yield readAsync(fd, Buffer.alloc(slice.length), 0, slice.length, slice.offset);\n      return buffer.buffer;\n    })();\n  }\n\n  close() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const fd = yield _this2.openRequest;\n      yield closeAsync(fd);\n    })();\n  }\n\n}\n\nexport function makeFileSource(path) {\n  return new FileSource(path);\n}","map":null,"metadata":{},"sourceType":"module"}