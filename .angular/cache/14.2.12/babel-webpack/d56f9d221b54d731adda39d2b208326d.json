{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Usuario/Documents/Trabajos para empresas/Modas Timay Fashion/Pagina web/modas-timay/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nconst registry = new Map();\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n\n  cases.forEach(c => registry.set(c, importFn));\n}\nexport function getDecoder(_x) {\n  return _getDecoder.apply(this, arguments);\n} // Add default decoders to registry (end-user may override with other implementations)\n\nfunction _getDecoder() {\n  _getDecoder = _asyncToGenerator(function* (fileDirectory) {\n    const importFn = registry.get(fileDirectory.Compression);\n\n    if (!importFn) {\n      throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n    }\n\n    const Decoder = yield importFn();\n    return new Decoder(fileDirectory);\n  });\n  return _getDecoder.apply(this, arguments);\n}\n\naddDecoder([undefined, 1], () => import('./raw.js').then(m => m.default));\naddDecoder(5, () => import('./lzw.js').then(m => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg.js').then(m => m.default));\naddDecoder([8, 32946], () => import('./deflate.js').then(m => m.default));\naddDecoder(32773, () => import('./packbits.js').then(m => m.default));\naddDecoder(34887, () => import('./lerc.js').then(m => m.default));\naddDecoder(50001, () => import('./webimage.js').then(m => m.default));","map":null,"metadata":{},"sourceType":"module"}