{"ast":null,"code":"export function fromWhiteIsZero(raster, max) {\n  const {\n    width,\n    height\n  } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n\n  return rgbRaster;\n}\nexport function fromBlackIsZero(raster, max) {\n  const {\n    width,\n    height\n  } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n\n  return rgbRaster;\n}\nexport function fromPalette(raster, colorMap) {\n  const {\n    width,\n    height\n  } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n\n  return rgbRaster;\n}\nexport function fromCMYK(cmykRaster) {\n  const {\n    width,\n    height\n  } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n\n  return rgbRaster;\n}\nexport function fromYCbCr(yCbCrRaster) {\n  const {\n    width,\n    height\n  } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n    rgbRaster[j] = y + 1.40200 * (cr - 0x80);\n    rgbRaster[j + 1] = y - 0.34414 * (cb - 0x80) - 0.71414 * (cr - 0x80);\n    rgbRaster[j + 2] = y + 1.77200 * (cb - 0x80);\n  }\n\n  return rgbRaster;\n}\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883; // from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const {\n    width,\n    height\n  } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = a_ / 500 + y;\n    let z = y - b_ / 200;\n    let r;\n    let g;\n    let b;\n    x = Xn * (x * x * x > 0.008856 ? x * x * x : (x - 16 / 116) / 7.787);\n    y = Yn * (y * y * y > 0.008856 ? y * y * y : (y - 16 / 116) / 7.787);\n    z = Zn * (z * z * z > 0.008856 ? z * z * z : (z - 16 / 116) / 7.787);\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570;\n    r = r > 0.0031308 ? 1.055 * r ** (1 / 2.4) - 0.055 : 12.92 * r;\n    g = g > 0.0031308 ? 1.055 * g ** (1 / 2.4) - 0.055 : 12.92 * g;\n    b = b > 0.0031308 ? 1.055 * b ** (1 / 2.4) - 0.055 : 12.92 * b;\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n\n  return rgbRaster;\n}","map":null,"metadata":{},"sourceType":"module"}